<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--namespace属性,用于指定当前的映射文件和哪个接口进行映射,需要制定接口的文件路径-->
<mapper namespace="com.example.demo.mapper.UserMapper">
    <!--自定义映射规则:resultMap标签来完成映射规则的定义-->
<resultMap id="UserEntityMap" type="com.example.demo.entity.User">
    <!--定义映射规则时主键不可省略-->
    <id column="uid" property="uid"></id>
    <!--江表的字段和类的属性不一至的字段进行匹配指定,名称一致的字段可以不写-->
    <result column="is_delete" property="isDelete"></result>
    <result column="created_user" property="createdUser"></result>
    <result column="created_time" property="createdTime"></result>
    <result column="modified_user " property="modifiedUser"></result>
    <result column="modified_time" property="modifiedTime"></result>
</resultMap>
    <!--id的值表示映射接口中方法的名称,直接在标签的内部来编写sql-->
    <insert id="insert" useGeneratedKeys="true" keyProperty="uid">
        INSERT INTO t_user(
        username,password,salt,phone,email,gender,avatar,
        is_delete,created_user,created_time,modified_user,modified_time
        )VALUES(
          #{username},#{password},#{salt},#{phone},#{email},#{gender},
          #{avatar},#{isDelete},#{createdUser},#{createdTime},
          #{modifiedUser}, #{modifiedTime}
        )
    </insert>
    <!--select 语言在执行的时候,查询的结果是一个对象,多个对象-->
    <!--
    resultType表示的是查询结果集的类型,只需要指定对应映射类的类型,并且包含完整包接口
    resultMap:表示当表的字段和类的对象属性的字段名称不一致时候,来自定义结果集的映射
    -->
    <select id="findByUsername" resultMap="UserEntityMap">
        SELECT * FROM t_user WHERE username = #{username}
    </select>

    <update id="updatePasswordByUid">
        UPDATE  t_user SET
            password =#{password},
                modified_user=#{modifiedUser},
                modified_time=#{modifiedTime}
        WHERE uid=#{uid}
    </update>

    <select id="findByUid" resultMap="UserEntityMap">
        SELECT * from t_user WHERE uid =#{uid}
    </select>
</mapper>